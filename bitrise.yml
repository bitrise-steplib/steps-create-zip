format_version: 9
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

workflows:
  ci:
    title: Bitrise CI
    description: |
      1, Git clone bitrise repo and install testing tools
      2, Run tests
      3, Announce test result
    before_run:
    - audit-this-step
    steps:
    - go-list:
    - golint:
    - errcheck:
    - go-test:
    - slack:
        title: Slack notifications
        run_if: ".IsCI"
        inputs:
        - webhook_url: "$INTERNAL_DEV_SLACK_WEBHOOK_URL"
        - channel: "$INTERNAL_DEV_LIFELINE_SLACK_CHANNEL"
        - from_username: "${BIN_NAME} - CI - OK"
        - from_username_on_error: "${BIN_NAME} - CI - ERROR"
        - message: |-
            CI was successful on branch: *${BITRISE_GIT_BRANCH}*

            Build URL: ${BITRISE_BUILD_URL}
        - message_on_error: |-
            CI FAILED on branch: *${BITRISE_GIT_BRANCH}*

            Build URL: ${BITRISE_BUILD_URL}

  test:  
    before_run:
    - audit-this-step
    steps:
    - go-list:
    - golint:
    - errcheck:
    - go-test:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            rm -rf "./_tmp"
    - change-workdir:
        title: Switch working dir to _tmp dir
        run_if: true
        inputs:
        - path: "./_tmp"
        - is_create_path: true
    - script:
        title: Create empty folder
        inputs:
        - content: mkdir "./folder_to_zip_test"
    - path::./:
        title: TESTING ZIP test
        inputs:
        - source_path: ./folder_to_zip_test
        - destination: ./folder_to_zip_test.zip
    - script:
        title: Unzip
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            unzip folder_to_zip_test.zip -d ./folder_to_zip_test_unzipped

            envman add --key ZIPPED_DIR_PATH --value "folder_to_zip_test"
            envman add --key UNZIPPED_DIR_PATH --value "folder_to_zip_test_unzipped/test_folder_to_zip_test"
    after_run:
        - _test_folder_in_folder

  _test_folder_in_folder:
    steps:
    steps:
    - script:
        title: Create folder with empty folder inside
        inputs:
        - content: mkdir -p "./test_folder_in_folder/nested_empy_folder_test"
    - path::./:
        title: TESTING ZIP folder in folder
        inputs:
        - source_path: ./test_folder_in_folder
        - destination: ./
    - script:
        title: Unzip
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            unzip test_folder_in_folder.zip -d ./test_folder_in_folder_unzipped

            envman add --key ZIPPED_DIR_PATH --value "test_folder_in_folder"
            envman add --key UNZIPPED_DIR_PATH --value "test_folder_in_folder_unzipped/test_folder_in_folder"
    after_run:
        - _check_file_struct
        - _test_file_in_folder

  _test_file_in_folder:
    steps:
    - script:
        title: Create folder with text file
        inputs:
        - content: |-
            mkdir "./test_file_in_folder/" && 
            touch "./test_file_in_folder/nested_text_test.txt"
    - path::./:
        title: TESTING ZIP file in folder
        inputs:
        - source_path: ./test_file_in_folder
        - destination: ./test_file_in_folder.zip
    - script:
        title: Unzip
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            unzip test_file_in_folder.zip -d ./test_file_in_folder_unzipped

            envman add --key ZIPPED_DIR_PATH --value "test_file_in_folder"
            envman add --key UNZIPPED_DIR_PATH --value "test_file_in_folder_unzipped/test_file_in_folder"
    after_run:
        - _check_file_struct
        - _test_symlink

  _test_symlink:
    steps:
    - script:
        title: Create folder with a symlink to a txt file
        inputs:
        - content: |-
            touch "symlink_file_test.txt" &&
            mkdir "./test_symlink/" && 
            cd "./test_symlink" && 
            ln -s  "../symlink_file_test.txt" && 
            touch "nested_text_test.txt"
    - path::./:
        title: TESTING ZIP symlink
        inputs:
        - source_path: ./test_symlink
        - destination: ./test_symlink.zip
    - script:
        title: Unzip
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            unzip test_symlink.zip -d ./test_symlink_unzipped

            envman add --key ZIPPED_DIR_PATH --value "test_symlink"
            envman add --key UNZIPPED_DIR_PATH --value "test_symlink_unzipped/test_symlink"
    after_run:
        - _check_file_struct
        - _test_nested_symlink

  _test_nested_symlink:
    steps:
    - script:
        title: Create folder with a nested symlink to a txt file
        inputs:
        - content: |-
            mkdir "nested_symlink" &&
            touch "nested_symlink/symlink_file.txt" &&
            ln -s "nested_symlink/symlink_file.txt" &&
            mkdir "./test_nested_symlink/" &&
            cd "./test_nested_symlink" &&
            ln -s  "../symlink_file.txt"
    - path::./:
        title: TESTING ZIP nested symlink
        inputs:
        - source_path: ./test_nested_symlink
        - destination: ./test_nested_symlink.zip
    - script:
        title: Unzip
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            unzip test_nested_symlink.zip -d ./test_nested_symlink_unzipped

            envman add --key ZIPPED_DIR_PATH --value "test_nested_symlink"
            envman add --key UNZIPPED_DIR_PATH --value "test_nested_symlink_unzipped/test_nested_symlink"
    after_run:
        - _check_file_struct
        - _test_file_only

  _test_file_only:
    steps:
    - script:
        title: Create text file
        inputs:
        - content: |
            touch "file_only.txt"
    - path::./:
        title: TESTING ZIP file only
        inputs:
        - source_path: ./file_only.txt
        - destination: ./test_file_only

  _check_file_struct:
    steps:
    - script:
        title: Check zipped file structure
        inputs:
        - content: |-
            echo Compare $ZIPPED_DIR_PATH\'s and $UNZIPPED_DIR_PATH\'s file structure
            
            before_zip="$(ls $ZIPPED_DIR_PATH)"
            after_zip="$(ls $UNZIPPED_DIR_PATH)"

            if [ ${before_zip} != ${after_zip} ]; then
              echo The zipped file structure is different than the original!
              echo Before zip - ${before_zip}
              echo After zip - ${after_zip}
              exit 1
            fi

  # ----------------------------------------------------------------
  # --- Utility workflows
  dep-update:
    title: Dep update
    description: |
      Used for updating bitrise dependencies with dep
    steps:
    - script:
        title: Dependency update
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            go get -u -v github.com/golang/dep/cmd/dep
            dep ensure -v
            dep ensure -v -update

  # ----------------------------------------------------------------
  # --- workflows to Share this step into a Step Library
  audit-this-step:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            stepman audit --step-yml ./step.yml
